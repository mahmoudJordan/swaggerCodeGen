/**
 * Api
 * API Description
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CreateMessageMobileModel } from '../model/createMessageMobileModel';
import { StringListStandardResponse } from '../model/stringListStandardResponse';
import { SystemEnums } from '../model/systemEnums';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class MessagesService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1MessagesSendMessageMobilePost(body?: CreateMessageMobileModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiV1MessagesSendMessageMobilePost(body?: CreateMessageMobileModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiV1MessagesSendMessageMobilePost(body?: CreateMessageMobileModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiV1MessagesSendMessageMobilePost(body?: CreateMessageMobileModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/api/v1/Messages/SendMessage/Mobile`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param conversationId 
     * @param type 
     * @param body 
     * @param senderAccountId 
     * @param receiverAccountId 
     * @param latitude 
     * @param longitude 
     * @param createdByAccountId 
     * @param localId 
     * @param fileFileId 
     * @param fileFileName 
     * @param fileFileExt 
     * @param fileFileUrl 
     * @param fileFileSize 
     * @param fileFileType 
     * @param isFromAdmin 
     * @param addressName 
     * @param fcmToken 
     * @param timerRecordVoice 
     * @param file 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1MessagesSendMessagePostForm(conversationId?: number, type?: SystemEnums, body?: string, senderAccountId?: number, receiverAccountId?: number, latitude?: number, longitude?: number, createdByAccountId?: number, localId?: number, fileFileId?: string, fileFileName?: string, fileFileExt?: string, fileFileUrl?: string, fileFileSize?: number, fileFileType?: string, isFromAdmin?: boolean, addressName?: string, fcmToken?: string, timerRecordVoice?: string, file?: Array<Blob>, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public apiV1MessagesSendMessagePostForm(conversationId?: number, type?: SystemEnums, body?: string, senderAccountId?: number, receiverAccountId?: number, latitude?: number, longitude?: number, createdByAccountId?: number, localId?: number, fileFileId?: string, fileFileName?: string, fileFileExt?: string, fileFileUrl?: string, fileFileSize?: number, fileFileType?: string, isFromAdmin?: boolean, addressName?: string, fcmToken?: string, timerRecordVoice?: string, file?: Array<Blob>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public apiV1MessagesSendMessagePostForm(conversationId?: number, type?: SystemEnums, body?: string, senderAccountId?: number, receiverAccountId?: number, latitude?: number, longitude?: number, createdByAccountId?: number, localId?: number, fileFileId?: string, fileFileName?: string, fileFileExt?: string, fileFileUrl?: string, fileFileSize?: number, fileFileType?: string, isFromAdmin?: boolean, addressName?: string, fcmToken?: string, timerRecordVoice?: string, file?: Array<Blob>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public apiV1MessagesSendMessagePostForm(conversationId?: number, type?: SystemEnums, body?: string, senderAccountId?: number, receiverAccountId?: number, latitude?: number, longitude?: number, createdByAccountId?: number, localId?: number, fileFileId?: string, fileFileName?: string, fileFileExt?: string, fileFileUrl?: string, fileFileSize?: number, fileFileType?: string, isFromAdmin?: boolean, addressName?: string, fcmToken?: string, timerRecordVoice?: string, file?: Array<Blob>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





















        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (conversationId !== undefined) {
            formParams = formParams.append('ConversationId', <any>conversationId) as any || formParams;
        }
        if (type !== undefined) {
            formParams = formParams.append('Type', <any>type) as any || formParams;
        }
        if (body !== undefined) {
            formParams = formParams.append('Body', <any>body) as any || formParams;
        }
        if (senderAccountId !== undefined) {
            formParams = formParams.append('SenderAccountId', <any>senderAccountId) as any || formParams;
        }
        if (receiverAccountId !== undefined) {
            formParams = formParams.append('ReceiverAccountId', <any>receiverAccountId) as any || formParams;
        }
        if (latitude !== undefined) {
            formParams = formParams.append('Latitude', <any>latitude) as any || formParams;
        }
        if (longitude !== undefined) {
            formParams = formParams.append('Longitude', <any>longitude) as any || formParams;
        }
        if (createdByAccountId !== undefined) {
            formParams = formParams.append('CreatedByAccountId', <any>createdByAccountId) as any || formParams;
        }
        if (localId !== undefined) {
            formParams = formParams.append('LocalId', <any>localId) as any || formParams;
        }
        if (fileFileId !== undefined) {
            formParams = formParams.append('File.FileId', <any>fileFileId) as any || formParams;
        }
        if (fileFileName !== undefined) {
            formParams = formParams.append('File.FileName', <any>fileFileName) as any || formParams;
        }
        if (fileFileExt !== undefined) {
            formParams = formParams.append('File.FileExt', <any>fileFileExt) as any || formParams;
        }
        if (fileFileUrl !== undefined) {
            formParams = formParams.append('File.FileUrl', <any>fileFileUrl) as any || formParams;
        }
        if (fileFileSize !== undefined) {
            formParams = formParams.append('File.FileSize', <any>fileFileSize) as any || formParams;
        }
        if (fileFileType !== undefined) {
            formParams = formParams.append('File.FileType', <any>fileFileType) as any || formParams;
        }
        if (isFromAdmin !== undefined) {
            formParams = formParams.append('IsFromAdmin', <any>isFromAdmin) as any || formParams;
        }
        if (addressName !== undefined) {
            formParams = formParams.append('AddressName', <any>addressName) as any || formParams;
        }
        if (fcmToken !== undefined) {
            formParams = formParams.append('FcmToken', <any>fcmToken) as any || formParams;
        }
        if (timerRecordVoice !== undefined) {
            formParams = formParams.append('TimerRecordVoice', <any>timerRecordVoice) as any || formParams;
        }
        if (file) {
            file.forEach((element) => {
                formParams = formParams.append('file', <any>element) as any || formParams;
            })
        }

        return this.httpClient.request<number>('post',`${this.basePath}/api/v1/Messages/SendMessage`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
